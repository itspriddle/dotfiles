{
    "*": {
        "console": "php artisan tinker",
        "dispatch": "composer install"
    },
    "**/.env.*": {
      "type": "dotenv",
      "alternate": ".env"
    },
    ".env": {
      "type": "dotenv",
      "alternate": ".env.example"
    },
    "*.php": {
        "template": [
            "<?php",
            "",
            "declare(strict_types=1);",
            ""
        ]
    },
    "config/*.php": {
        "type": "config",
        "template": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "return [",
            "    //",
            "];"
        ]
    },
    "config/app.php": {
        "type": "config"
    },
    "docs/*.md": {
        "type": "doc",
        "template": [
            "# {}",
            "",
            ""
        ]
    },
    "README.md": {
        "type": "doc"
    },
    "app/*.php": {
      "alternate": [
        "tests/Unit/{}Test.php",
        "tests/Feature/{}Test.php"
      ],
      "template": [
           "<?php",
           "",
           "declare(strict_types=1);",
           "",
           "namespace App\\{dirname|backslash};",
           "",
           "class {basename}",
           "{open}",
           "    //",
           "{close}"
      ]
    },
    "app/Broadcasting/*.php": {
        "type": "broadcast"
    },
    "app/Casts/*.php": {
        "type": "cast"
    },
    "app/Console/Commands/*.php": {
        "type": "command"
    },
    "app/Enums/*.php": {
        "type": "enum"
    },
    "app/Events/*.php": {
        "type": "event"
    },
    "app/Exceptions/*.php": {
        "type": "exception"
    },
    "app/Facades/*.php": {
        "type": "facade"
    },
    "app/Http/Controllers/*.php": {
        "type": "controller"
    },
    "app/Http/Middleware/*.php": {
        "type": "middleware"
    },
    "app/Http/Requests/*.php": {
        "type": "request"
    },
    "app/Http/Resources/*.php": {
        "type": "resource"
    },
    "app/Jobs/*.php": {
        "type": "job"
    },
    "app/Livewire/*.php": {
        "type": "livewire"
    },
    "app/Mail/*.php": {
        "type": "mail"
    },
    "app/Models/*.php": {
        "type": "model",
        "related": [
          "app/Observers/{}Observer.php",
          "app/Policies/{}Policy.php",
          "database/factories/{}Factory.php",
          "database/seeders/{}Seeder.php",
          "tests/Unit/Models/{}Test.php",
          "tests/Feature/Models/{}Test.php"
        ]
    },
    "app/Listeners/*.php": {
        "type": "listener"
    },
    "app/Notifications/*.php": {
        "type": "notification"
    },
    "app/Observers/*.php": {
        "type": "observer"
    },
    "app/Policies/*.php": {
        "type": "policy"
    },
    "app/Providers/*.php": {
        "type": "provider"
    },
    "app/Providers/AppServiceProvider.php": {
        "type": "provider"
    },
    "app/Repositories/*.php": {
        "type": "repository"
    },
    "app/Rules/*.php": {
        "type": "rule"
    },
    "app/Scopes/*.php": {
        "type": "scope"
    },
    "app/Services/*.php": {
        "type": "service"
    },
    "app/Traits/*.php": {
        "type": "trait"
    },
    "database/factories/*.php": {
        "type": "factory"
    },
    "database/migrations/*.php": {
        "type": "migration",
        "make": "NO_COLOR=1 php artisan migrate --path=database/migrations/{file|basename}",
        "dispatch": "NO_COLOR=1 php artisan migrate"
    },
    "database/seeders/*.php": {
        "type": "seeder",
        "make": "NO_COLOR=1 php artisan db:seed Database\\\\Seeders\\\\{backslash}",
        "dispatch": "NO_COLOR=1 php artisan db:seed"
    },
    "database/seeders/DatabaseSeeder.php": {
        "type": "seeder"
    },
    "routes/*.php": {
        "type": "route",
        "alternate": "bootstrap/app.php"
    },
    "routes/web.php": {
        "type": "route"
    },
    "tests/Unit/*Test.php": {
        "type": "test",
        "alternate": "app/{}.php"
    },
    "tests/Feature/*Test.php": {
        "type": "test",
        "alternate": "app/{}.php"
    },
    "tests/*Test.php": {
        "type": "test",
        "make": "NO_COLOR=1 php artisan test {file}",
        "dispatch": "NO_COLOR=1 php artisan test {file}"
    },
    ".github/workflows/*.yml": {
        "type": "workflow"
    },
    ".github/workflows/ci.yml": {
        "type": "workflow"
    },
    "package.json": {
        "type": "npm",
        "alternate": "package-lock.json",
        "make": "npm install"
    },
    "package-lock.json": {
        "alternate": "package.json",
        "make": "npm install"
    },
    "vite.config.js": {
        "type": "vite",
        "make": "npm run build",
        "start": "npm run dev"
    },
    "tailwind.config.js": {
        "type": "tailwind"
    },
    "resources/css/app.css": {
        "type": "css"
    },
    "resources/css/*.css": {
        "type": "css"
    },
    "resources/js/app.js": {
        "type": "js"
    },
    "resources/js/*.js": {
        "type": "js"
    },
    "lang/*.php": {
        "type": "lang",
        "template": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "return [",
            "    //",
            "];"
        ]
    },
    "resources/views/*.blade.php": {
        "type": "view"
    },
    "script/*": {
        "type": "script",
        "template": [
          "#!/usr/bin/env bash",
          "# Usage: {snakecase|hyphenate}",
          "#",
          "# NAME",
          "#   {snakecase|hyphenate} -- It does something",
          "#",
          "# OPTIONS",
          "#   -h, --help",
          "#     Print this help message and exit.",
          "",
          "if [[ \"$DEBUG\" ]]; then",
          "  export PS4='+ [${open}BASH_SOURCE##*/{close}:${open}LINENO{close}] '",
          "  set -x",
          "fi",
          "",
          "set -euo pipefail",
          "",
          "if [[ \"${open}1:-{close}\" = \"-h\" ]] || [[ \"${1:-{close}\" = \"--help\" ]]; then",
          "  sed -ne '/^#/!q;s/^#$/# /;/^# /s/^# //p' < \"$0\" |",
          "    awk -v f=\"${open}1//-/{close}\" 'f == \"h\" && $1 == \"Usage:\" {open} print; exit {close}; f != \"h\"'",
          "  exit 1",
          "fi",
          "",
          "echo \"I'm in danger!\""
        ]
    },
    "composer.json": {
        "alternate": "composer.lock",
        "make": "NO_COLOR=1 composer install --no-progress --no-interaction"
    },
    "composer.lock": {
        "alternate": "composer.json",
        "make": "NO_COLOR=1 composer install --no-progress --no-interaction"
    },
    "storage/logs/*.log": {
        "type": "log"
    }
}
