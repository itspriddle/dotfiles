#!/usr/bin/env bash
set -e

help() {
  cat <<EOF
Usage: gcof

Displays an interactive branch switcher that lists local branches in relation
to the pull requests in the repository. The selected branch is checked out.

With \`--static\`, print a non-interactive list of branches.

Dependencies: fzf

Based on http://github.com/mislav/gh-branch
EOF
# You can also select multiple branches with Tab and press Ctrl-D to delete them.
}

static=
while [ $# -gt 0 ]; do
  case "$1" in
  -h|--help)
    help
    exit 0
    ;;
  --static)
    static=1
    ;;
  *)
    if [[ "$#" == 1 ]]; then
      git checkout "$1"
      exit 1
    else
      echo "error: unknown argument: $1" >&2
      help >&2
      exit 1
    fi
    ;;
  esac
  shift
done

branch_info() {
  git for-each-ref 'refs/heads/**' \
    --sort=-committerdate \
    --sort=-HEAD \
    --format=$'%(HEAD) %(color:yellow)%(refname:short) %(color:cyan)(%(committerdate:relative))\t%(color:reset)%(subject)' \
    --color=always
}

render() {
  local branches line
  branches="$(branch_info)" || return 1

  echo 'ALT-D to delete selected branch(es)'

  while IFS= read -r line; do
    printf "%s\n" "$line"
  done <<< "$branches" | tableize
}

tableize() {
  column -t -s$'\t'
}

if [ -n "$static" ]; then
  render
  exit 0
fi

if ! type -p fzf >/dev/null; then
  echo "error: install \`fzf\` to use this command" >&2
  exit 1
fi

_fzf() {
  local preview_cmd=$'git log --color=always --oneline --graph --date=short --format="%C(cyan)%cd%C(reset)%C(auto) %h%d %s" $(cut -c3- <<< {} | cut -d" " -f1) --'

  fzf \
    --ansi \
    --layout reverse \
    --multi \
    --tmux 90%,70% \
    --border \
    --no-separator \
    --header-border horizontal \
    --border-label 'Branches ' \
    --header-lines 1 \
    --border-label-pos 1 \
    --no-hscroll \
    --color 'label:blue,hl:underline,hl+:underline' \
    --preview-window 'down,border-top,40%' \
    --bind 'ctrl-/:change-preview-window(down,50%|hidden|)' \
    --bind "alt-d:execute-silent(git branch -D {+1})+reload(\"$0\" --static)" \
    --preview "$preview_cmd" |
      sed 's/^\* //' |
      awk '{ print $1 }'
}

choose() {
  local rendered
  rendered="$(render)" || return 1
  _fzf <<< "$rendered"
}

selected="$(choose)"
[ -n "$selected" ] || exit 1
git checkout "${selected%% *}"
