#!/usr/bin/env bash
# Usage: marked <file1> [<file2>...]
#        marked < FILE
#        echo "# Markdown" | marked
#        marked
#        # Some Markdown
#        ^d
#
# NAME
#   marked - open files and content in Marked 2
#
# SYNOPSIS
#   marked <file1> [<file2>...]
#   marked < FILE
#   echo "# Markdown" | marked
#   marked
#   # Some Markdown
#   ^d
#
# DESCRIPTION
#   Opens files or input in Marked 2.
#
#   In the first synopsis form, opens the given files in Marked.
#
#   In the second synopsis form, reads input from a file and opens a preview
#   in Marked.
#
#   In the third synopsis form, reads input from STDIN and opens a preview in
#   Marked.
#
#   In the fourth synopsis form, opens STDIN and opens a preview in Marked
#   with the content.
#
# OPTIONS
#   -c <file>, --css <file>
#     Adds a new custom style to Marked.
#
#   -h, --help
#     Prints this help text.
#
# SEE ALSO
#   https://marked2app.com
#   https://marked2app.com/help/URL_Handler.html#open

if [[ "$DEBUG" ]]; then
  export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '
  set -x
fi

set -euo pipefail

# Prints help text from the top of this file
#
# $1 - -h to show one line usage, otherwise print full help
print_help() {
  sed -ne '/^#/!q;s/^#$/# /;/^# /s/^# //p' < "$0" |
    awk -v f="${1#-h}" '!f && /^Usage:/ || u { u=!/^\s*$/; if (!u) exit } u || f'

  return 1
}

# URL encodes the given string
#
# $1 - string to encode
urlencode() {
  local LC_ALL=C

  for (( i = 0; i < ${#1}; i++ )); do
    : "${1:i:1}"
    case "$_" in
      [a-zA-Z0-9.~_-]) printf '%s' "$_" ;;
      *) printf '%%%02X' "'$_" ;;
    esac
  done

  printf '\n'
}

main() {
  local file

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -h | --help)
        print_help "$1"
        return 1
        ;;
      -c | --css)
        shift
        if [[ "$#" -eq 0 ]]; then
          echo "${0##*/}: Must specify CSS file" >&2
          return 1
        elif [[ ! -f "$2" ]]; then
          echo "${0##*/}: CSS file '$2' not found" >&2
          return 1
        fi
        file=$(realpath "$2")
        open "x-marked://addstyle?file=$(urlencode "$2")"
        return 0
        ;;
      --)
        shift
        break
        ;;
      *-)
        echo "${0##*/}: Invalid option '$1'" >&2
        return 1
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ -t 0 ]] && [[ $# -gt 0 ]]; then
    for arg; do
      file=$(realpath "$arg")
      open "x-marked://open?file=$(urlencode "$file")"
    done
  else
    open "x-marked://preview?text=$(urlencode "$(cat /dev/stdin)")"
  fi
}

main "$@"
