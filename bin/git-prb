#!/usr/bin/env bash
# Usage: git prb [options]
#
# DESCRIPTION
#   Opens an existing Pull Request on GitHub.com in your browser using the
#   `hub browse` command. This is done by comparing the SHA for HEAD against
#   remote refs on GitHub. Options other than `-h` are passed to `hub browse`.
#
# EXAMPLES
#   Open the pull request for HEAD.
#   $ git pr --browse
#
#   Just print the URL, don't open it in the browser.
#   $ git pr --browse -u
#
# SEE ALSO
#   hub(1), hub-browse(1)

# Print help text and exit.
if [[ "$1" = "-h" ]]; then
  sed -ne '/^#/!q;s/.\{1,2\}//;1d;p' < "$0"
  exit
fi

# Ensure `hub` is available.
if ! type hub &> /dev/null; then
  >&2 echo "Error: \`hub\` not found. Install from https://github.com/github/hub"
  exit 1
fi

# Ensure this is a GitHub repo.
if [[ "$(git ls-remote --get-url 2> /dev/null)" != *"github"* ]]; then
  >&2 echo "Error: Remote \`origin' is not on GitHub, or is not setup."
  exit 1
fi

# Get the current branch name.
branch="$(git symbolic-ref HEAD | sed 's|^refs/heads/||')"

# Bail if master is checked out. You can't open a PR on master.
if [[ "$branch" = "master" ]]; then
  >&2 echo "Error: You are on \`master', checkout a new branch first!"
  exit 1
fi


# Get the current revision
sha="$(git rev-parse HEAD)"

# GitHub stores remotes for each PR as `refs/pull/#/head`. Find the first
# one that matches the current revision.
pull="$(
  git ls-remote origin | awk -v line="^${sha}.*pull.*" ' $0 ~ line {
    gsub(/[^[:digit:]]/, "", $2)
    print $2
    exit
  }'
)"

# If a pull request was found open it, otherwise print an error. In either
# case execution of this script stops here.
if [[ "$pull" ]]; then
  exec hub browse "${@}" -- "pull/${pull}"
else
  >&2 echo "Couldn't find a pull request for ${sha:0:7}"
  exit 1
fi
